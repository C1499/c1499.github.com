{"meta":{"title":"饼干大超人","subtitle":"给时光以生命，给岁月以文明","description":null,"author":"Simone","url":"https://04071011.xyz"},"pages":[{"title":"search","date":"2019-03-16T12:20:04.000Z","updated":"2019-03-16T12:41:54.384Z","comments":true,"path":"search/index.html","permalink":"https://04071011.xyz/search/index.html","excerpt":"","text":""},{"title":"关于","date":"2019-01-16T02:52:41.000Z","updated":"2019-03-16T08:45:26.393Z","comments":true,"path":"about/index.html","permalink":"https://04071011.xyz/about/index.html","excerpt":"","text":"&emsp;&emsp;在不久之前就有一点搭建自己的博客的念头，但因为拖延症晚期，一直没能去实现， 最近无意中发现阿里云有一个活动，头脑一热的买了个域名。既然买了域名就要放东西，于是就这么一步步的有了这里的存在。&emsp;&emsp;我还没有想法，在这里存放一些关于我的什么东西，也许是一些生活感悟？大概就是些心灵鸡汤也许是一些教程毕竟老忘事，学了什么记一下也好，也许…说不完的可能性，慢慢写，希望这里能督促我，这样以后回想的时候不会发现自己好像在虚度光阴，总是有留下些什么的……&emsp;&emsp;这里采用的是hexo-theme-random主题，也是我精挑细选实则挑了一天多，最后实在不想再挑的结果，是个很纯净的主题，功能不多，专注写博客。不过说实话到后面就后悔了，毕竟新手上路，什么都想玩一玩，功能都得自己摸索去添加，看着那么多的.swig文件，欲哭无泪，想着应该选个强大的主题，直接配置文件写就行，不过自己选的主题，跪着也要用到最后……是吧 Email:1499832767@qq.com"},{"title":"分类","date":"2019-01-16T02:51:43.000Z","updated":"2019-03-16T08:45:11.300Z","comments":false,"path":"categories/index.html","permalink":"https://04071011.xyz/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2019-01-16T02:50:36.000Z","updated":"2019-03-16T08:45:22.167Z","comments":true,"path":"tags/index.html","permalink":"https://04071011.xyz/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"2020.9.14","slug":"2020-9-14","date":"2020-09-14T08:54:42.000Z","updated":"2020-12-30T12:16:02.974Z","comments":true,"path":"2020/09/14/2020-9-14/","link":"","permalink":"https://04071011.xyz/2020/09/14/2020-9-14/","excerpt":"","text":"数据结构——大O表示法数据结构中算法的空间、时间复杂度一直不是很清楚，看了一遍又一遍但还是没有搞懂的很彻底。处于一种感觉理解又好像不理解的地步，今天就仔仔细细的学一学。首先弄懂时间复杂度吧。 时间复杂度「 大O符号表示法 」是我们表示一个算法所消耗时间的方法，即 T(n) = O(f(n))。它不是表示出一个代码的具体执行时间，而是表示代码执行时间的变化趋势，它也被称作算法的渐进时间复杂度。 推导大O阶的方法 1.用常数1取代运行时间中的发所有加法常数2.在修改后的运行次数函数中，只保留最高阶项3.如果最高阶项存在且不是1，则去除与这个项相乘的常数。 以上内容来自《大话数据结构》P30我觉得简单来说就是结果中含有加法常数的可以省略，去除非最高项的项，与常数相乘的项如果非1，则去除这个常数。例子：O(3n^2+2n+1)=&gt;O(n^2)。 常数阶O(1)1234int sum=0,n=999;sum++;++n;system.out.println(&quot;sum&quot;); 代码块中没有涉及到循环等其他复杂的结构，那么这个代码块的时间复杂度就是O(1)。上面的代码，运行次数函数是f(n)=4,根据推导大O阶的方法，f(n)=1。所以无论上方的代码执行多少次，最终f(n)还是等于1。 线性阶O(n)12345for(i=1; i&lt;=n; ++i) //执行n次&#123; j = i; //执行1次 j++; //执行1次&#125; 这段代码，其实不难看懂。不过有一个疑惑的点，我在看《大话数据结构》时间复杂度一章时，第一行 for 循环的代码，书上计算的是执行n+1次。虽然+1和不+1的区别并不是很大，最终的结果都是 O(n) ,我们也只是需要知道代码的时间增长趋势，但就是纠结这个问题。网上搜索也并没有人提过这个问题，有一个版本的教材前面出现这部分代码时写的是n+1，到了后面就变成了n次。按照我的计算来看，就是n次。得到计算结果后，常数项可以省略。 对数阶O(logN)1234int i=0;while (i&lt;n)&#123; i = i*5;&#125; 每一轮i都会*5，直到i&gt;n才会结束循环。所以5^x=n,x=log5^n。根据我们推导大O阶方法的第三条可得,这段代码的时间复杂度为O(logN)。 线性对数阶O(nlogN)123456for(m=0;m&lt;n;m++)&#123; int i=0; while (i&lt;n)&#123; i = i*5; &#125;&#125; 线性对数阶就是将时间复杂度为O(logN)的代码循环N遍。 平方阶O(n^2)1234567for(i=1; i&lt;=n; ++i) //执行n次&#123; for(j=1;j&lt;=n;j++)&#123; //执行n^2次 j = i; //执行1次 j++; //执行1次 &#125;&#125; 平方阶就是将O(n)的代码循环嵌套一遍，也就是O(n*n)=&gt;O(n^2)次。这个也比较好理解，把之前的掌握后，就容易理解了。 立方阶O(n^3)、K次方阶O(n^k)这两种与平方阶类似，多层循环嵌套。","categories":[{"name":"日常记录","slug":"日常记录","permalink":"https://04071011.xyz/categories/日常记录/"}],"tags":[{"name":"日常记录","slug":"日常记录","permalink":"https://04071011.xyz/tags/日常记录/"},{"name":"2020","slug":"2020","permalink":"https://04071011.xyz/tags/2020/"}]},{"title":"Hello World","slug":"hello-world","date":"2019-01-15T15:39:05.459Z","updated":"2019-01-19T11:55:25.799Z","comments":true,"path":"2019/01/15/hello-world/","link":"","permalink":"https://04071011.xyz/2019/01/15/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1234567891011121314151617181920212223242526272829303132333435363738394041424344$ hexo generate$ hexo generate$ hexo generate$ hexo generate$ hexo generate$ hexo generate$ hexo generate$ hexo generate$ hexo generate$ hexo generate$ hexo generate$ hexo generate$ hexo generate$ hexo generate$ hexo generate$ hexo generate$ hexo generate$ hexo generate$ hexo generate$ hexo generate$ hexo generate$ hexo generate$ hexo generate$ hexo generate$ hexo generate$ hexo generate$ hexo generate$ hexo generate$ hexo generate$ hexo generatehighlighthighlighthighlighthighlighthighlighthighlighthighlighthighlighthighlighthighlighthighlighthighlighthighlight$ hexo generate$ hexo generate$ hexo generate$ hexo generate$ hexo generate$ hexo generate$ hexo generate$ hexo generate$ hexo generate$ hexo generate$ hexo generate$ hexo generate$ hexo generate$ hexo generate$ hexo generate$ hexo generate$ hexo generate$ hexo generate$ hexo generate$ hexo generate$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}